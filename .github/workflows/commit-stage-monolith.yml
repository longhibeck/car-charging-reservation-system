name: commit-stage-monolith

on:
  push:
    branche    # - name: Run linting
    #   run: uv run ruff check src/
    #   shell: bash
    #   working-directory: monolith
    #   env:
    #     UV_PROJECT_ENVIRONMENT: .venv-ci
    # 
    # - name: Run formatting check
    #   run: uv run ruff format --check src/
    #   shell: bash
    #   working-directory: monolith
    #   env:
    #     UV_PROJECT_ENVIRONMENT: .venv-cin" ]
    paths:
        - 'monolith/**'
        - '.github/workflows/commit-stage-monolith.yml'
  pull_request:
    branches: [ "main" ]
    paths:
        - 'monolith/**'
        - '.github/workflows/commit-stage-monolith.yml'
  workflow_dispatch:

concurrency:
  group: commit-stage-monolith-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest

    outputs:
      image-latest-url: ${{ steps.publish.outputs.image-latest-url }}
      image-digest-url: ${{ steps.publish.outputs.image-digest-url }}

    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
    
    - name: Install dependencies
      run: uv sync --reinstall
      shell: bash
      working-directory: monolith
      env:
        UV_PROJECT_ENVIRONMENT: .venv-ci
    
    # - name: Run linting
    #   run: uv run ruff check src/
    #   shell: bash
    #   working-directory: monolith
    
    # - name: Run formatting check
    #   run: uv run ruff format --check src/
    #   shell: bash
    #   working-directory: monolith

    - name: Publish Docker Image
      id: publish
      uses: optivem/publish-docker-image-action@v1
      with:
        working-directory: monolith
        image-name: monolith
        registry: ghcr.io
        registry-username: ${{ github.actor }}
        image-namespace: ${{ github.repository }}
        image-latest-tag: latest
        commit-sha: ${{ github.sha }}
        dockerfile: Dockerfile
      env:
        REGISTRY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}

  summary:
    needs: build
    runs-on: ubuntu-latest
    if: always()

    steps:
      
    - name: Commit Stage Summary
      uses: optivem/summarize-commit-stage-action@v1
      with:
        stage-result: ${{ needs.build.result }}
        success-artifact-url: ${{ needs.build.outputs.image-latest-url }}
